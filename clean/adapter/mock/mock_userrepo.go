// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/soluty/x/clean/usecase (interfaces: UserRepo)

package mock

import (
	pegomock "github.com/petergtz/pegomock"
	entity "github.com/soluty/x/clean/entity"
	"reflect"
	"time"
)

type MockUserRepo struct {
	fail func(message string, callerSkip ...int)
}

func NewMockUserRepo(options ...pegomock.Option) *MockUserRepo {
	mock := &MockUserRepo{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockUserRepo) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockUserRepo) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockUserRepo) Create(username string, email string, password string) (*entity.User, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockUserRepo().")
	}
	params := []pegomock.Param{username, email, password}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Create", params, []reflect.Type{reflect.TypeOf((**entity.User)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *entity.User
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*entity.User)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserRepo) GetById(userName int) (*entity.User, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockUserRepo().")
	}
	params := []pegomock.Param{userName}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetById", params, []reflect.Type{reflect.TypeOf((**entity.User)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *entity.User
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*entity.User)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserRepo) GetByEmailAndPassword(email string, password string) (*entity.User, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockUserRepo().")
	}
	params := []pegomock.Param{email, password}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetByEmailAndPassword", params, []reflect.Type{reflect.TypeOf((**entity.User)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *entity.User
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*entity.User)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserRepo) Save(user entity.User) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockUserRepo().")
	}
	params := []pegomock.Param{user}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Save", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockUserRepo) VerifyWasCalledOnce() *VerifierMockUserRepo {
	return &VerifierMockUserRepo{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockUserRepo) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockUserRepo {
	return &VerifierMockUserRepo{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockUserRepo) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockUserRepo {
	return &VerifierMockUserRepo{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockUserRepo) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockUserRepo {
	return &VerifierMockUserRepo{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockUserRepo struct {
	mock                   *MockUserRepo
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockUserRepo) Create(username string, email string, password string) *MockUserRepo_Create_OngoingVerification {
	params := []pegomock.Param{username, email, password}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Create", params, verifier.timeout)
	return &MockUserRepo_Create_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockUserRepo_Create_OngoingVerification struct {
	mock              *MockUserRepo
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockUserRepo_Create_OngoingVerification) GetCapturedArguments() (string, string, string) {
	username, email, password := c.GetAllCapturedArguments()
	return username[len(username)-1], email[len(email)-1], password[len(password)-1]
}

func (c *MockUserRepo_Create_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockUserRepo) GetById(userName int) *MockUserRepo_GetById_OngoingVerification {
	params := []pegomock.Param{userName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetById", params, verifier.timeout)
	return &MockUserRepo_GetById_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockUserRepo_GetById_OngoingVerification struct {
	mock              *MockUserRepo
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockUserRepo_GetById_OngoingVerification) GetCapturedArguments() int {
	userName := c.GetAllCapturedArguments()
	return userName[len(userName)-1]
}

func (c *MockUserRepo_GetById_OngoingVerification) GetAllCapturedArguments() (_param0 []int) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]int, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(int)
		}
	}
	return
}

func (verifier *VerifierMockUserRepo) GetByEmailAndPassword(email string, password string) *MockUserRepo_GetByEmailAndPassword_OngoingVerification {
	params := []pegomock.Param{email, password}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetByEmailAndPassword", params, verifier.timeout)
	return &MockUserRepo_GetByEmailAndPassword_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockUserRepo_GetByEmailAndPassword_OngoingVerification struct {
	mock              *MockUserRepo
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockUserRepo_GetByEmailAndPassword_OngoingVerification) GetCapturedArguments() (string, string) {
	email, password := c.GetAllCapturedArguments()
	return email[len(email)-1], password[len(password)-1]
}

func (c *MockUserRepo_GetByEmailAndPassword_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockUserRepo) Save(user entity.User) *MockUserRepo_Save_OngoingVerification {
	params := []pegomock.Param{user}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Save", params, verifier.timeout)
	return &MockUserRepo_Save_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockUserRepo_Save_OngoingVerification struct {
	mock              *MockUserRepo
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockUserRepo_Save_OngoingVerification) GetCapturedArguments() entity.User {
	user := c.GetAllCapturedArguments()
	return user[len(user)-1]
}

func (c *MockUserRepo_Save_OngoingVerification) GetAllCapturedArguments() (_param0 []entity.User) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]entity.User, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(entity.User)
		}
	}
	return
}
